esphome:
  name: esphome_light_ir_remote
  platform: ESP32
  board: esp32dev

globals:
  - id: last_set_light_on_state
    type: bool
    restore_value: yes
    initial_value: 'false'

  - id: last_set_light_brightness
    type: float
    restore_value: yes
    initial_value: '100'

wifi:
  fast_connect: True  # needed for hidden SSID
  networks:
    - ssid: 'YourSSID'
      bssid: '00:00:00:00:00:00'
      password: 'YourPassword'
      hidden: true
  #manual_ip:
  #  static_ip: 192.168.5.49
  #  gateway: 192.168.5.1
  #  subnet: 255.255.255.0

remote_transmitter:
  pin: GPIO5
  carrier_duty_percent: 50%

# Bild Beleuchtung Gold Batteriebetrieben


script:
  - id: turn_on
    then:
      - remote_transmitter.transmit_lg:
          data: 0x00FF22DD
          nbits: 32
      - globals.set:
          id: last_set_light_on_state
          value: 'true'
      - script.execute: apply_brightness
      - script.execute: apply_color_temp

  - id: turn_off
    then:
      - remote_transmitter.transmit_lg:
          data: 0x00FFC23D
          nbits: 32
      - globals.set:
          id: last_set_light_on_state
          value: 'false'

  - id: set_brightness_10
    then:
      - globals.set:
          id: last_set_light_brightness
          value: "10"
      - script.execute: apply_brightness

  - id: set_brightness_30
    then:
      - globals.set:
          id: last_set_light_brightness
          value: "30"
      - script.execute: apply_brightness

  - id: set_brightness_50
    then:
      - globals.set:
          id: last_set_light_brightness
          value: "50"
      - script.execute: apply_brightness

  - id: set_brightness_70
    then:
      - globals.set:
          id: last_set_light_brightness
          value: "70"
      - script.execute: apply_brightness

  - id: set_brightness_100
    then:
      - globals.set:
          id: last_set_light_brightness
          value: "100"
      - script.execute: apply_brightness

  - id: apply_brightness
    then:
      - remote_transmitter.transmit_lg:
          data: !lambda |-
            uint32_t brightness = id(last_set_light_brightness);
            if (brightness == 100) {
              return 0x00FFB04F;
            } else if (brightness == 70) {
              return 0x00FF9867;
            } else if (brightness == 50) {
              return 0x00FF6897;
            } else if (brightness == 30) {
              return 0x00FF906F;
            } else if (brightness == 10) {
              return 0x00FFE01F;
            } else {
              return 0x00FFB04F;
            }
          nbits: 32

  - id: increase_brightness
    then:
      - globals.set:
          id: last_set_light_brightness
          value: !lambda |-
            float brightness = id(last_set_light_brightness);
            if (brightness == 100) {
              return 100;
            } else if (brightness == 70) {
              return 100;
            } else if (brightness == 50) {
              return 70;
            } else if (brightness == 30) {
              return 50;
            } else if (brightness == 10) {
              return 30;
            } else {
              return 100;
            }
      - script.execute: apply_brightness

  - id: decrease_brightness
    then:
      - globals.set:
          id: last_set_light_brightness
          value: !lambda |-
            float brightness = id(last_set_light_brightness);
            if (brightness == 100) {
              return 70;
            } else if (brightness == 70) {
              return 50;
            } else if (brightness == 50) {
              return 30;
            } else if (brightness == 30) {
              return 10;
            } else if (brightness == 10) {
              return 10;
            } else {
              return 100;
            }
      - script.execute: apply_brightness

  - id: set_color_temp_cold
    then:
      - globals.set:
          id: last_set_light_color_temp
          value: '"cold"'
      - script.execute: apply_color_temp

  - id: set_color_temp_mixed
    then:
      - globals.set:
          id: last_set_light_color_temp
          value: '"mixed"'
      - script.execute: apply_color_temp

  - id: set_color_temp_warm
    then:
      - globals.set:
          id: last_set_light_color_temp
          value: '"warm"'
      - script.execute: apply_color_temp

  - id: apply_color_temp
    then:
      - remote_transmitter.transmit_lg:
          data: !lambda |-
            std::string color_temp = id(last_set_light_color_temp);
            if (color_temp == "cold") {
              id(ir_remote_color_temp_select).publish_state("cold");
              return 0x00FF30CF;
            } else if (color_temp == "mixed") {
              id(ir_remote_color_temp_select).publish_state("mixed");
              return 0x00FF08F7;
            } else if (color_temp == "warm") {
              id(ir_remote_color_temp_select).publish_state("warm");
              return 0x00FF7A85;
            } else {
              return 0x00FF30CF;
            }
          nbits: 32
          repeat: 2

  - id: set_timer_15m
    then:
      - remote_transmitter.transmit_lg:
          data: 0x00FF10EF
          nbits: 32

  - id: set_timer_30m
    then:
      - remote_transmitter.transmit_lg:
          data: 0x00FF38C7
          nbits: 32

  - id: set_timer_60m
    then:
      - remote_transmitter.transmit_lg:
          data: 0x00FF5AA5
          nbits: 32

button:
  - platform: template
    name: "Timer 15m"
    on_press:
      - script.execute: set_timer_15m

  - platform: template
    name: "Timer 30m"
    on_press:
      - script.execute: set_timer_30m

  - platform: template
    name: "Timer 60m"
    on_press:
      - script.execute: set_timer_60m

switch:
  - platform: template
    name: "On/Off"
    lambda: |-
      if (id(last_set_light_on_state)) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - script.execute: turn_on
    turn_off_action:
      - script.execute: turn_off

select:
  - platform: template
    id: ir_remote_color_temp_select
    name: "Color Temperature"
    lambda: |-
      return id(last_set_light_color_temp);
    set_action:
      - lambda: |-
          if (x == "cold") {
            id(set_color_temp_cold).execute();
          } else if (x == "mixed") {
            id(set_color_temp_mixed).execute();
          } else if (x == "warm") {
            id(set_color_temp_warm).execute();
          }
    options:
      - cold
      - mixed
      - warm

number:
  - platform: template
    name: "Brightness Level"
    min_value: 1
    max_value: 5
    step: 1
    lambda: |-
      float brightness = id(last_set_light_brightness);
      if (brightness == 100) {
        return 5;
      } else if (brightness == 70) {
        return 4;
      } else if (brightness == 50) {
        return 3;
      } else if (brightness == 30) {
        return 2;
      } else if (brightness == 10) {
        return 1;
      } else {
        return 5;
      }
    set_action:
      - lambda: |-
          if (x == 1) {
            id(set_brightness_10).execute();
          } else if (x == 2) {
            id(set_brightness_30).execute();
          } else if (x == 3) {
            id(set_brightness_50).execute();
          } else if (x == 4) {
            id(set_brightness_70).execute();
          } else if (x == 5) {
            id(set_brightness_100).execute();
          }
